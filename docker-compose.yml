version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=trial
      - xpack.ml.use_auto_machine_memory_percent=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl --output /dev/null --silent --head --fail -u elastic:${ELASTICSEARCH_PASSWORD} http://elasticsearch:9200"]
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --appendonly yes --replica-read-only no
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 5s
    env_file:
      - .env

  crawler:
    build: 
      context: .
      dockerfile: crawler/Dockerfile
    container_name: crawler
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - REDIS_HOST=redis
    command: ["celery", "-A", "tasks_crawler", "worker", "--loglevel=info", "-Q", "crawler"]
    volumes:
      - ./app:/app
    env_file:
      - .env
    restart: on-failure

  notifier:
    build: 
      context: .
      dockerfile: notifier/Dockerfile
    container_name: notifier
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - REDIS_HOST=redis
    command: ["celery", "-A", "tasks_notifier", "worker", "--loglevel=info", "-Q", "notifier"]
    volumes:
      - ./app:/app
    env_file:
      - .env
    restart: on-failure

  celery-beat:
    build: 
      context: .
      dockerfile: celery-beat/Dockerfile
    container_name: celery-beat
    depends_on:
      - redis
      - elasticsearch
    environment:
      - REDIS_HOST=redis
    command: ["celery", "-A", "tasks_scheduler", "beat", "--loglevel=info"]
    volumes:
      - ./app:/app
    env_file:
      - .env
    restart: always

volumes:
  esdata:
    driver: local
